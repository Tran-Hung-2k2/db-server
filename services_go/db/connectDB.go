package db

import (
	"db-server/utils"
	"fmt"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

// ORM public cho c√°c module
var DB *gorm.DB

// ConnectToPostgres k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu PostgreSQL v√† t·ª± ƒë·ªông migrate b·∫£ng
func ConnectToPostgres(models ...interface{}) {
	// ƒê·ªçc c√°c bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
	host := utils.GetEnv("DB_HOST", "127.0.0.1")
	port := utils.GetEnv("DB_PORT", "5432")
	user := utils.GetEnv("DB_USER", "postgres")
	password := utils.GetEnv("DB_PASSWORD", "postgres")
	dbname := utils.GetEnv("DB_NAME", "postgres")

	// T·∫°o chu·ªói k·∫øt n·ªëi DSN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Shanghai", host, user, password, dbname, port)

	// K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		utils.Warning.Println("K·∫øt n·ªëi database th·∫•t b·∫°i")
		return
	}
	utils.Info.Println("üöÄ K·∫øt n·ªëi database th√†nh c√¥ng")

	DB = db

	// Migrate c√°c b·∫£ng trong database
	MigrateDB(models...)
}
