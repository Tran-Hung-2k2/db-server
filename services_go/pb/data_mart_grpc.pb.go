// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: data_mart.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataMartService_GetDataMart_FullMethodName = "/proto.DataMartService/GetDataMart"
)

// DataMartServiceClient is the client API for DataMartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataMartServiceClient interface {
	GetDataMart(ctx context.Context, in *GetDataMartRequest, opts ...grpc.CallOption) (*GetDataMartResponse, error)
}

type dataMartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataMartServiceClient(cc grpc.ClientConnInterface) DataMartServiceClient {
	return &dataMartServiceClient{cc}
}

func (c *dataMartServiceClient) GetDataMart(ctx context.Context, in *GetDataMartRequest, opts ...grpc.CallOption) (*GetDataMartResponse, error) {
	out := new(GetDataMartResponse)
	err := c.cc.Invoke(ctx, DataMartService_GetDataMart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataMartServiceServer is the server API for DataMartService service.
// All implementations must embed UnimplementedDataMartServiceServer
// for forward compatibility
type DataMartServiceServer interface {
	GetDataMart(context.Context, *GetDataMartRequest) (*GetDataMartResponse, error)
	mustEmbedUnimplementedDataMartServiceServer()
}

// UnimplementedDataMartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataMartServiceServer struct {
}

func (UnimplementedDataMartServiceServer) GetDataMart(context.Context, *GetDataMartRequest) (*GetDataMartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataMart not implemented")
}
func (UnimplementedDataMartServiceServer) mustEmbedUnimplementedDataMartServiceServer() {}

// UnsafeDataMartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataMartServiceServer will
// result in compilation errors.
type UnsafeDataMartServiceServer interface {
	mustEmbedUnimplementedDataMartServiceServer()
}

func RegisterDataMartServiceServer(s grpc.ServiceRegistrar, srv DataMartServiceServer) {
	s.RegisterService(&DataMartService_ServiceDesc, srv)
}

func _DataMartService_GetDataMart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataMartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataMartServiceServer).GetDataMart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataMartService_GetDataMart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataMartServiceServer).GetDataMart(ctx, req.(*GetDataMartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataMartService_ServiceDesc is the grpc.ServiceDesc for DataMartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataMartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataMartService",
	HandlerType: (*DataMartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataMart",
			Handler:    _DataMartService_GetDataMart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_mart.proto",
}
